# Optimized multi-stage build for smaller image
FROM public.ecr.aws/docker/library/python:3.9-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Install Python packages with optimization flags
COPY backend/requirements.txt /tmp/
RUN pip install --user --no-cache-dir --no-compile \
    --no-warn-script-location \
    -r /tmp/requirements.txt

# Final stage - minimal runtime
FROM public.ecr.aws/docker/library/python:3.9-slim

# Install only essential runtime dependencies
# Using minimal packages and cleaning up aggressively
RUN apt-get update && apt-get install -y --no-install-recommends \
    ffmpeg \
    libglib2.0-0 \
    libgl1 \
    libgomp1 \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /usr/share/doc/* \
    && rm -rf /usr/share/man/* \
    && rm -rf /usr/share/locale/* \
    && rm -rf /var/cache/debconf/* \
    && rm -rf /tmp/*

# Copy Python packages from builder
COPY --from=builder /root/.local /root/.local

# Clean up Python cache files to save space
RUN find /root/.local -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true \
    && find /root/.local -type f -name '*.pyc' -delete 2>/dev/null || true \
    && find /root/.local -type f -name '*.pyo' -delete 2>/dev/null || true

# Set up working directory
WORKDIR /app

# Copy only essential backend code
COPY backend/*.py /app/
COPY backend/requirements.txt /app/
COPY backend/.env.example /app/

# Copy CLI code (needed by backend)
COPY cli/ /cli/

# Copy frontend for serving
COPY frontend/ /frontend/

# Make sure scripts are in PATH
ENV PATH=/root/.local/bin:$PATH

# Disable Python bytecode generation to save space
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Create temp directory
RUN mkdir -p /app/temp && chmod 755 /app/temp

# Default command
CMD ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000"]